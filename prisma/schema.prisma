generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url = env("DATABASE_URL")
}

model User {
    id                  Int                 @id @default(autoincrement())
    username            String              @unique
    email               String              @unique
    password            String
    createdAt           DateTime            @default(now())
    updatedAt           DateTime            @updatedAt
    notifications       Notification[]  
    friendsTo           User[]              @relation("UserFriends")
    friendsFrom         User[]              @relation("UserFriends")
    memberOfGroups      Group[]             @relation("GroupMembers")
    createdBets         Bet[]               @relation("CreatedBets")
    receivedBets        Bet[]               @relation("ReceivedBets")
    sentTransactions    Transaction[]       @relation("SentTransactions")
    receivedTransactions Transaction[]      @relation("ReceivedTransactions")
}

model Bet {
    id                  Int                 @id @default(autoincrement())
    description         String?
    deadline            DateTime?           @default(now())
    amount              Float
    creatorId           Int
    creator             User                @relation("CreatedBets", fields: [creatorId], references: [id])
    opponentId          Int?                
    opponent            User?               @relation("ReceivedBets", fields: [opponentId], references: [id])
    opponentGroupId     Int?                
    opponentGroup       Group?              @relation("ReceivedGroupBets", fields: [opponentGroupId], references: [id])
    createdAt           DateTime            @default(now())
    resolvedAt          DateTime?
    status              BetStatus           @default(PENDING)
    resolveMessage      String?
}

model Group {
    id                  Int                 @id @default(autoincrement())
    name                String   
    members             User[]              @relation("GroupMembers")
    receivedBets        Bet[]               @relation("ReceivedGroupBets")
}

model Notification {
    id                  Int                 @id @default(autoincrement())
    headerMessage       String
    message             String
    userId              Int
    user                User                @relation(fields: [userId], references: [id])
    createdAt           DateTime            @default(now())
    isRead              Boolean             @default(false)
}

model Transaction {
    id                  Int                 @id @default(autoincrement())
    betId               Int 
    senderId            Int
    sender              User                @relation("SentTransactions", fields: [senderId], references: [id])
    receiverId          Int
    receiver            User                @relation("ReceivedTransactions", fields: [receiverId], references: [id])
    amount              Float
    status              TransactionStatus   @default(PENDING)
    createdAt           DateTime            @default(now())
}


enum BetStatus {
    PENDING
    COMPLETED
    CANCELED
    SETTLED 
}

enum TransactionStatus {
    PENDING
    COMPLETED
    FAILED
}